{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/nanakojootabil/VenCap - Empresario/SuperProps - React Next Landing Page Templates/SuperProps/node_modules/reusecore/src/elements/Checkbox/index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useToggle } from '../../hooks';\nimport CheckBoxStyle from './checkbox.style';\n\nvar CheckBox = function CheckBox(_ref) {\n  var className = _ref.className,\n      isChecked = _ref.isChecked,\n      labelText = _ref.labelText,\n      value = _ref.value,\n      id = _ref.id,\n      htmlFor = _ref.htmlFor,\n      labelPosition = _ref.labelPosition,\n      isMaterial = _ref.isMaterial,\n      disabled = _ref.disabled,\n      props = _objectWithoutProperties(_ref, [\"className\", \"isChecked\", \"labelText\", \"value\", \"id\", \"htmlFor\", \"labelPosition\", \"isMaterial\", \"disabled\"]);\n\n  // use toggle hooks\n  var _useToggle = useToggle(isChecked),\n      _useToggle2 = _slicedToArray(_useToggle, 2),\n      toggleValue = _useToggle2[0],\n      toggleHandler = _useToggle2[1]; // Add all classs to an array\n\n\n  var addAllClasses = ['reusecore__checkbox']; // Add label position class\n\n  if (labelPosition) {\n    addAllClasses.push(\"label_\".concat(labelPosition));\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // label control\n\n\n  var LabelField = labelText && React.createElement(\"span\", {\n    className: \"reusecore__field-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, labelText);\n  var position = labelPosition || 'right';\n  return React.createElement(CheckBoxStyle, _extends({\n    className: addAllClasses.join(' ')\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: htmlFor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, position === 'left' || position === 'right' ? LabelField : '', React.createElement(\"input\", _extends({\n    type: \"checkbox\",\n    className: \"checkbox\",\n    id: id,\n    value: value,\n    checked: toggleValue,\n    onChange: toggleHandler,\n    disabled: disabled\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })));\n};\n\nCheckBox.propTypes = {\n  /** ClassName of the Checkbox */\n  className: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelText: PropTypes.string,\n\n  /**\r\n   * Note: id and htmlFor must be same.\r\n   */\n  htmlFor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** Set checkbox id in number || string */\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** value of the checkbox field */\n  value: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelPosition: PropTypes.oneOf(['right', 'left']),\n\n  /** Checkbox toggle state based on isChecked prop */\n  isChecked: PropTypes.bool,\n\n  /** disabled of the checkbox field */\n  disabled: PropTypes.bool\n};\n/** Checkbox default proptype */\n\nCheckBox.defaultProps = {\n  isChecked: false,\n  labelText: 'Checkbox label',\n  labelPosition: 'right',\n  disabled: false\n};\nexport default CheckBox;","map":{"version":3,"sources":["/Users/nanakojootabil/VenCap - Empresario/SuperProps - React Next Landing Page Templates/SuperProps/node_modules/reusecore/src/elements/Checkbox/index.js"],"names":["React","PropTypes","useToggle","CheckBoxStyle","CheckBox","className","isChecked","labelText","value","id","htmlFor","labelPosition","isMaterial","disabled","props","toggleValue","toggleHandler","addAllClasses","push","LabelField","position","join","propTypes","string","oneOfType","number","oneOf","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useToggle } from '../../hooks';\r\nimport CheckBoxStyle from './checkbox.style';\r\n\r\nconst CheckBox = ({\r\n  className,\r\n  isChecked,\r\n  labelText,\r\n  value,\r\n  id,\r\n  htmlFor,\r\n  labelPosition,\r\n  isMaterial,\r\n  disabled,\r\n  ...props\r\n}) => {\r\n  // use toggle hooks\r\n  const [toggleValue, toggleHandler] = useToggle(isChecked);\r\n\r\n  // Add all classs to an array\r\n  const addAllClasses = ['reusecore__checkbox'];\r\n\r\n  // Add label position class\r\n  if (labelPosition) {\r\n    addAllClasses.push(`label_${labelPosition}`);\r\n  }\r\n\r\n  // isMaterial prop checking\r\n  if (isMaterial) {\r\n    addAllClasses.push('is-material');\r\n  }\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  // label control\r\n  const LabelField = labelText && (\r\n    <span className=\"reusecore__field-label\">{labelText}</span>\r\n  );\r\n\r\n  const position = labelPosition || 'right';\r\n\r\n  return (\r\n    <CheckBoxStyle className={addAllClasses.join(' ')} {...props}>\r\n      <label htmlFor={htmlFor}>\r\n        {position === 'left' || position === 'right' ? LabelField : ''}\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"checkbox\"\r\n          id={id}\r\n          value={value}\r\n          checked={toggleValue}\r\n          onChange={toggleHandler}\r\n          disabled={disabled}\r\n          {...props}\r\n        />\r\n        <div />\r\n      </label>\r\n    </CheckBoxStyle>\r\n  );\r\n};\r\n\r\nCheckBox.propTypes = {\r\n  /** ClassName of the Checkbox */\r\n  className: PropTypes.string,\r\n\r\n  /** labelText of the checkbox field */\r\n  labelText: PropTypes.string,\r\n\r\n  /**\r\n   * Note: id and htmlFor must be same.\r\n   */\r\n  htmlFor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n  /** Set checkbox id in number || string */\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n  /** value of the checkbox field */\r\n  value: PropTypes.string,\r\n\r\n  /** labelText of the checkbox field */\r\n  labelPosition: PropTypes.oneOf(['right', 'left']),\r\n\r\n  /** Checkbox toggle state based on isChecked prop */\r\n  isChecked: PropTypes.bool,\r\n\r\n  /** disabled of the checkbox field */\r\n  disabled: PropTypes.bool\r\n};\r\n\r\n/** Checkbox default proptype */\r\nCheckBox.defaultProps = {\r\n  isChecked: false,\r\n  labelText: 'Checkbox label',\r\n  labelPosition: 'right',\r\n  disabled: false\r\n};\r\nexport default CheckBox;\r\n"]},"metadata":{},"sourceType":"module"}