{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/nanakojootabil/VenCap - Empresario/SuperProps - React Next Landing Page Templates/SuperProps/node_modules/reusecore/src/elements/Input/index.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport InputField, { EyeButton } from './input.style';\n\nvar Input = function Input(_ref) {\n  var label = _ref.label,\n      value = _ref.value,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      onChange = _ref.onChange,\n      inputType = _ref.inputType,\n      isMaterial = _ref.isMaterial,\n      icon = _ref.icon,\n      iconPosition = _ref.iconPosition,\n      passwordShowHide = _ref.passwordShowHide,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, [\"label\", \"value\", \"onBlur\", \"onFocus\", \"onChange\", \"inputType\", \"isMaterial\", \"icon\", \"iconPosition\", \"passwordShowHide\", \"className\"]);\n\n  // use toggle hooks\n  var _useState = useState({\n    toggle: false,\n    focus: false,\n    value: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1]; // toggle function\n\n\n  var handleToggle = function handleToggle() {\n    setState(_objectSpread({}, state, {\n      toggle: !state.toggle\n    }));\n  }; // add focus class\n\n\n  var handleOnFocus = function handleOnFocus(event) {\n    setState(_objectSpread({}, state, {\n      focus: true\n    }));\n    onFocus(event);\n  }; // remove focus class\n\n\n  var handleOnBlur = function handleOnBlur(event) {\n    setState(_objectSpread({}, state, {\n      focus: false\n    }));\n    onBlur(event);\n  }; // handle input value\n\n\n  var handleOnChange = function handleOnChange(event) {\n    setState(_objectSpread({}, state, {\n      value: event.target.value\n    }));\n    onChange(event.target.value);\n  }; // get input focus class\n\n\n  var getInputFocusClass = function getInputFocusClass() {\n    if (state.focus === true || state.value !== '') {\n      return 'is-focus';\n    } else {\n      return '';\n    }\n  }; // init variable\n\n\n  var inputElement, htmlFor; // Add all classs to an array\n\n  var addAllClasses = ['reusecore__input']; // Add is-material class\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // Add icon position class if input element has icon\n\n\n  if (icon && iconPosition) {\n    addAllClasses.push(\"icon-\".concat(iconPosition));\n  } // Add new class\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // if lable is not empty\n\n\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\n  } // Label position\n\n\n  var LabelPosition = isMaterial === true ? 'bottom' : 'top'; // Label field\n\n  var LabelField = label && React.createElement(\"label\", {\n    htmlFor: htmlFor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, label); // Input type check\n\n  switch (inputType) {\n    case 'textarea':\n      inputElement = React.createElement(\"textarea\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }));\n      break;\n\n    case 'password':\n      inputElement = React.createElement(\"div\", {\n        className: \"field-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"input\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        type: state.toggle ? 'password' : 'text',\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })), passwordShowHide && React.createElement(EyeButton, {\n        onClick: handleToggle,\n        className: state.toggle ? 'eye' : 'eye-closed',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })));\n      break;\n\n    default:\n      inputElement = React.createElement(\"div\", {\n        className: \"field-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"input\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        type: inputType,\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      })), icon && React.createElement(\"span\", {\n        className: \"input-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, icon));\n  }\n\n  return React.createElement(InputField, {\n    className: \"\".concat(addAllClasses.join(' '), \" \").concat(getInputFocusClass()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, LabelPosition === 'top' && LabelField, inputElement, isMaterial && React.createElement(\"span\", {\n    className: \"highlight\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }), LabelPosition === 'bottom' && LabelField);\n};\n/** Inout prop type checking. */\n\n\nInput.propTypes = {\n  /** className of the Input component. */\n  className: PropTypes.string,\n\n  /** Set input label value. */\n  label: PropTypes.string,\n\n  /** The input value, required for a controlled component. */\n  value: PropTypes.oneOf(['string', 'number']),\n\n  /** Make default input into material style input. */\n  isMaterial: PropTypes.bool,\n\n  /** Password show hide icon button prop [*only for password field]. */\n  passwordShowHide: PropTypes.bool,\n\n  /** Set input type of the input element. Default type is text. */\n  inputType: PropTypes.oneOf(['text', 'email', 'password', 'number', 'textarea']),\n\n  /** Add icon in input field. This prop will not work with password\r\n   * and textarea field.\r\n   */\n  icon: PropTypes.object,\n\n  /** Set input field icon position. Default position is 'left'. */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n\n  /**\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n\n  /**\r\n   * Callback fired when the value is changed.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value`.\r\n   */\n  onChange: PropTypes.func\n};\n/** Inout default type. */\n\nInput.defaultProps = {\n  inputType: 'text',\n  isMaterial: false,\n  iconPosition: 'left',\n  onBlur: function onBlur() {},\n  onFocus: function onFocus() {},\n  onChange: function onChange() {}\n};\nexport default Input;","map":{"version":3,"sources":["/Users/nanakojootabil/VenCap - Empresario/SuperProps - React Next Landing Page Templates/SuperProps/node_modules/reusecore/src/elements/Input/index.js"],"names":["React","useState","PropTypes","InputField","EyeButton","Input","label","value","onBlur","onFocus","onChange","inputType","isMaterial","icon","iconPosition","passwordShowHide","className","props","toggle","focus","state","setState","handleToggle","handleOnFocus","event","handleOnBlur","handleOnChange","target","getInputFocusClass","inputElement","htmlFor","addAllClasses","push","replace","toLowerCase","LabelPosition","LabelField","join","propTypes","string","oneOf","bool","object","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport InputField, { EyeButton } from './input.style';\r\nconst Input = ({\r\n  label,\r\n  value,\r\n  onBlur,\r\n  onFocus,\r\n  onChange,\r\n  inputType,\r\n  isMaterial,\r\n  icon,\r\n  iconPosition,\r\n  passwordShowHide,\r\n  className,\r\n  ...props\r\n}) => {\r\n  // use toggle hooks\r\n  const [state, setState] = useState({\r\n    toggle: false,\r\n    focus: false,\r\n    value: ''\r\n  });\r\n\r\n  // toggle function\r\n  const handleToggle = () => {\r\n    setState({\r\n      ...state,\r\n      toggle: !state.toggle\r\n    });\r\n  };\r\n\r\n  // add focus class\r\n  const handleOnFocus = event => {\r\n    setState({\r\n      ...state,\r\n      focus: true\r\n    });\r\n    onFocus(event);\r\n  };\r\n\r\n  // remove focus class\r\n  const handleOnBlur = event => {\r\n    setState({\r\n      ...state,\r\n      focus: false\r\n    });\r\n    onBlur(event);\r\n  };\r\n\r\n  // handle input value\r\n  const handleOnChange = event => {\r\n    setState({\r\n      ...state,\r\n      value: event.target.value\r\n    });\r\n    onChange(event.target.value);\r\n  };\r\n\r\n  // get input focus class\r\n  const getInputFocusClass = () => {\r\n    if (state.focus === true || state.value !== '') {\r\n      return 'is-focus';\r\n    } else {\r\n      return '';\r\n    }\r\n  };\r\n\r\n  // init variable\r\n  let inputElement, htmlFor;\r\n\r\n  // Add all classs to an array\r\n  const addAllClasses = ['reusecore__input'];\r\n\r\n  // Add is-material class\r\n  if (isMaterial) {\r\n    addAllClasses.push('is-material');\r\n  }\r\n\r\n  // Add icon position class if input element has icon\r\n  if (icon && iconPosition) {\r\n    addAllClasses.push(`icon-${iconPosition}`);\r\n  }\r\n\r\n  // Add new class\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  // if lable is not empty\r\n  if (label) {\r\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\r\n  }\r\n\r\n  // Label position\r\n  const LabelPosition = isMaterial === true ? 'bottom' : 'top';\r\n\r\n  // Label field\r\n  const LabelField = label && <label htmlFor={htmlFor}>{label}</label>;\r\n\r\n  // Input type check\r\n  switch (inputType) {\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          {...props}\r\n          id={htmlFor}\r\n          name={htmlFor}\r\n          value={state.value}\r\n          onChange={handleOnChange}\r\n          onBlur={handleOnBlur}\r\n          onFocus={handleOnFocus}\r\n        />\r\n      );\r\n      break;\r\n\r\n    case 'password':\r\n      inputElement = (\r\n        <div className=\"field-wrapper\">\r\n          <input\r\n            {...props}\r\n            id={htmlFor}\r\n            name={htmlFor}\r\n            type={state.toggle ? 'password' : 'text'}\r\n            value={state.value}\r\n            onChange={handleOnChange}\r\n            onBlur={handleOnBlur}\r\n            onFocus={handleOnFocus}\r\n          />\r\n          {passwordShowHide && (\r\n            <EyeButton\r\n              onClick={handleToggle}\r\n              className={state.toggle ? 'eye' : 'eye-closed'}\r\n            >\r\n              <span />\r\n            </EyeButton>\r\n          )}\r\n        </div>\r\n      );\r\n      break;\r\n\r\n    default:\r\n      inputElement = (\r\n        <div className=\"field-wrapper\">\r\n          <input\r\n            {...props}\r\n            id={htmlFor}\r\n            name={htmlFor}\r\n            type={inputType}\r\n            value={state.value}\r\n            onChange={handleOnChange}\r\n            onBlur={handleOnBlur}\r\n            onFocus={handleOnFocus}\r\n          />\r\n          {icon && <span className=\"input-icon\">{icon}</span>}\r\n        </div>\r\n      );\r\n  }\r\n\r\n  return (\r\n    <InputField\r\n      className={`${addAllClasses.join(' ')} ${getInputFocusClass()}`}\r\n    >\r\n      {LabelPosition === 'top' && LabelField}\r\n      {inputElement}\r\n      {isMaterial && <span className=\"highlight\" />}\r\n      {LabelPosition === 'bottom' && LabelField}\r\n    </InputField>\r\n  );\r\n};\r\n\r\n/** Inout prop type checking. */\r\nInput.propTypes = {\r\n  /** className of the Input component. */\r\n  className: PropTypes.string,\r\n\r\n  /** Set input label value. */\r\n  label: PropTypes.string,\r\n\r\n  /** The input value, required for a controlled component. */\r\n  value: PropTypes.oneOf(['string', 'number']),\r\n\r\n  /** Make default input into material style input. */\r\n  isMaterial: PropTypes.bool,\r\n\r\n  /** Password show hide icon button prop [*only for password field]. */\r\n  passwordShowHide: PropTypes.bool,\r\n\r\n  /** Set input type of the input element. Default type is text. */\r\n  inputType: PropTypes.oneOf([\r\n    'text',\r\n    'email',\r\n    'password',\r\n    'number',\r\n    'textarea'\r\n  ]),\r\n\r\n  /** Add icon in input field. This prop will not work with password\r\n   * and textarea field.\r\n   */\r\n  icon: PropTypes.object,\r\n\r\n  /** Set input field icon position. Default position is 'left'. */\r\n  iconPosition: PropTypes.oneOf(['left', 'right']),\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onBlur: PropTypes.func,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onFocus: PropTypes.func,\r\n\r\n  /**\r\n   * Callback fired when the value is changed.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value`.\r\n   */\r\n  onChange: PropTypes.func\r\n};\r\n\r\n/** Inout default type. */\r\nInput.defaultProps = {\r\n  inputType: 'text',\r\n  isMaterial: false,\r\n  iconPosition: 'left',\r\n  onBlur: () => {},\r\n  onFocus: () => {},\r\n  onChange: () => {}\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}